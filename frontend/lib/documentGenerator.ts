// Document generation and download utilities

interface DocumentOptions {
  title: string
  content: string
  metadata: {
    projectName: string
    industry: string
    wordCount: number
    generatedAt: string
    organization?: string
  }
}

export class DocumentGenerator {
  // Generate HTML document with proper government formatting
  static generateHTML(options: DocumentOptions): string {
    const { title, content, metadata } = options
    const organization = metadata.organization || "Government of India"
    
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <style>
        body {
            font-family: 'Times New Roman', Times, serif;
            line-height: 1.6;
            margin: 0;
            padding: 40px;
            background: #fff;
            color: #000;
        }
        .document-header {
            text-align: center;
            border-bottom: 3px solid #1e40af;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .gov-logo {
            width: 80px;
            height: 80px;
            margin: 0 auto 15px;
            background: linear-gradient(135deg, #1e40af, #3b82f6);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 30px;
            font-weight: bold;
        }
        .org-name {
            font-size: 24px;
            font-weight: bold;
            color: #1e40af;
            margin-bottom: 5px;
        }
        .org-subtitle {
            font-size: 16px;
            color: #666;
            margin-bottom: 20px;
        }
        .document-title {
            font-size: 28px;
            font-weight: bold;
            color: #000;
            margin: 20px 0;
        }
        .nit-info {
            display: flex;
            justify-content: space-between;
            background: #f8fafc;
            padding: 15px;
            border-left: 5px solid #1e40af;
            margin: 20px 0;
        }
        .content {
            white-space: pre-wrap;
            font-size: 14px;
            line-height: 1.8;
        }
        .section-header {
            font-size: 18px;
            font-weight: bold;
            color: #1e40af;
            margin: 25px 0 15px 0;
            border-bottom: 2px solid #e5e7eb;
            padding-bottom: 5px;
        }
        .document-footer {
            margin-top: 50px;
            border-top: 2px solid #1e40af;
            padding-top: 20px;
            text-align: center;
            color: #666;
            font-size: 12px;
        }
        .metadata {
            display: flex;
            justify-content: space-between;
            margin-top: 15px;
        }
        @media print {
            body { margin: 20px; }
            .no-print { display: none; }
        }
        .bilingual-header {
            font-size: 20px;
            margin: 15px 0;
        }
        .hindi { font-family: 'Devanagari Sangam MN', serif; }
        .english { font-family: 'Times New Roman', serif; }
        
        /* Table styles */
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }
        th {
            background-color: #f8fafc;
            font-weight: bold;
        }
        
        /* List styles */
        ul, ol {
            margin: 15px 0;
            padding-left: 30px;
        }
        li {
            margin: 8px 0;
        }
    </style>
</head>
<body>
    <div class="document-header">
        <div class="gov-logo">üáÆüá≥</div>
        <div class="org-name">${organization}</div>
        <div class="org-subtitle">‡§≠‡§æ‡§∞‡§§ ‡§∏‡§∞‡§ï‡§æ‡§∞ | Government of India</div>
        <div class="document-title">${title}</div>
    </div>
    
    <div class="nit-info">
        <div>
            <strong>NIT No:</strong> ${metadata.industry?.toUpperCase()}/RFP/${new Date().getFullYear()}/AI-${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}
        </div>
        <div>
            <strong>Date:</strong> ${new Date().toLocaleDateString('en-IN')}
        </div>
    </div>
    
    <div class="content">${this.formatContent(content)}</div>
    
    <div class="document-footer">
        <div class="metadata">
            <div>Project: ${metadata.projectName}</div>
            <div>Industry: ${metadata.industry}</div>
            <div>Word Count: ${metadata.wordCount}</div>
        </div>
        <div style="margin-top: 15px;">
            Generated by GovRFP360AI on ${new Date(metadata.generatedAt).toLocaleDateString('en-IN')} at ${new Date(metadata.generatedAt).toLocaleTimeString('en-IN')}
        </div>
        <div style="margin-top: 10px; color: #1e40af; font-weight: bold;">
            ‡§ú‡§Ø ‡§π‡§ø‡§®‡•ç‡§¶ | Jai Hind
        </div>
    </div>
</body>
</html>`;
  }

  // Format content with proper styling
  static formatContent(content: string): string {
    return content
      .replace(/^# (.*$)/gm, '<h1 class="section-header">$1</h1>')
      .replace(/^## (.*$)/gm, '<h2 class="section-header">$1</h2>')
      .replace(/^### (.*$)/gm, '<h3 style="font-size: 16px; font-weight: bold; margin: 20px 0 10px 0;">$1</h3>')
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/^- (.*$)/gm, '<li>$1</li>')
      .replace(/(<li>.*<\/li>)/g, '<ul>$1</ul>')
      .replace(/\n\n/g, '<br><br>')
      .replace(/\|([^|]+)\|([^|]+)\|([^|]+)\|/g, '<tr><td>$1</td><td>$2</td><td>$3</td></tr>')
      .replace(/(<tr>.*<\/tr>)/g, '<table>$1</table>')
  }

  // Download as HTML
  static downloadHTML(options: DocumentOptions) {
    const html = this.generateHTML(options)
    const blob = new Blob([html], { type: 'text/html' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${options.metadata.projectName.replace(/\s+/g, '_')}_RFP.html`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  // Download as formatted text
  static downloadText(options: DocumentOptions) {
    const { title, content, metadata } = options
    const organization = metadata.organization || "Government of India"
    
    const formattedContent = `
================================================================================
                              ${organization}
                           ‡§≠‡§æ‡§∞‡§§ ‡§∏‡§∞‡§ï‡§æ‡§∞ | Government of India
================================================================================

                                    ${title}

NIT No: ${metadata.industry?.toUpperCase()}/RFP/${new Date().getFullYear()}/AI-${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}
Date: ${new Date().toLocaleDateString('en-IN')}

================================================================================

${content}

================================================================================
PROJECT METADATA
================================================================================
Project Name: ${metadata.projectName}
Industry: ${metadata.industry}
Word Count: ${metadata.wordCount}
Generated: ${new Date(metadata.generatedAt).toLocaleDateString('en-IN')} ${new Date(metadata.generatedAt).toLocaleTimeString('en-IN')}
System: GovRFP360AI

================================================================================
                                  ‡§ú‡§Ø ‡§π‡§ø‡§®‡•ç‡§¶ | Jai Hind
================================================================================
`

    const blob = new Blob([formattedContent], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${options.metadata.projectName.replace(/\s+/g, '_')}_RFP.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  // Print document
  static printDocument(options: DocumentOptions) {
    const html = this.generateHTML(options)
    const printWindow = window.open('', '_blank')
    if (printWindow) {
      printWindow.document.write(html)
      printWindow.document.close()
      printWindow.focus()
      setTimeout(() => {
        printWindow.print()
        printWindow.close()
      }, 1000)
    }
  }

  // Copy formatted content
  static copyToClipboard(content: string) {
    navigator.clipboard.writeText(content).then(() => {
      // Success handled by caller
    }).catch(err => {
      console.error('Failed to copy text: ', err)
    })
  }
}

export default DocumentGenerator
